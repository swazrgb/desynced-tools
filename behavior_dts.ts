export const behavior_dts = "\ninterface BaseValue {\n  /**\n   * Divert program depending on location of a unit\n   */\n  altitude?: \"Valley\" | \"Plateau\";\n  /**\n   * Divert program depending on location of a unit\n   */\n  inBlight: boolean;\n  /**\n   * Gets location of a a seen entity\n   */\n  location: Value;\n  /**\n   * Gets the resource type from an resource node\n   */\n  resourceType?: Value;\n  /**\n   * Gets the trust level of the unit towards you\n   */\n  trust?: \"ally\" | \"neutral\" | \"enemy\";\n  /**\n   * Checks the movement state of an entity\n   */\n  isMoving: \"Moving\" | \"Not Moving\" | \"Path Blocked\" | \"No Result\";\n  /**\n   * Reads the Signal register of another unit\n   */\n  signal: Value;\n  /**\n   * Divert program depending on unit type\n   */\n  unitType: \"No Unit\" | \"Building\" | \"Bot\" | \"Construction\";\n  /**\n   * Switch based on type of value\n   */\n  type: \"No Match\" | \"Item\" | \"Entity\" | \"Component\" | \"Tech\" | \"Value\" | \"Coord\";\n\n  /**\n   * Checks the Battery level of a unit\n   */\n  fullBattery(): boolean;\n  /**\n   * Checks the Efficiency of the power grid the unit is on\n   */\n  fullGridEfficiency(): boolean;\n  /**\n   * Check a units health\n   */\n  fullHealth(): boolean;\n  /**\n   * Counts the number of the passed item in its inventory\n   * @param item Item to count\n   * @returns Number of this item in inventory or empty if none exist\n   */\n  count(item: Value | Item): Value;\n  /**\n   * Counts the number of the passed item in its inventory\n   * @param item Item to count\n   * @returns Number of this item in inventory or empty if none exist\n   */\n  countReserved(item: Value | Item): Value;\n  /**\n   * Returns the number of slots in this unit of the given type\n   * @returns Number of slots of this type\n   */\n  countAllSlots(): Value;\n  /**\n   * Returns the number of slots in this unit of the given type\n   * @returns Number of slots of this type\n   */\n  countStorageSlots(): Value;\n  /**\n   * Returns the number of slots in this unit of the given type\n   * @returns Number of slots of this type\n   */\n  countGasSlots(): Value;\n  /**\n   * Returns the number of slots in this unit of the given type\n   * @returns Number of slots of this type\n   */\n  countVirusSlots(): Value;\n  /**\n   * Returns the number of slots in this unit of the given type\n   * @returns Number of slots of this type\n   */\n  countAnomolySlots(): Value;\n  /**\n   * Returns distance to a unit\n   * @param target Target unit\n   * @returns Unit and its distance in the numerical part of the value\n   */\n  getDistance(target: Value): Value;\n  /**\n   * Returns how many of the input item can fit in the inventory\n   * @param item Item to check can fit\n   * @returns Number of a specific item that can fit on a unit\n   */\n  getfreespace(item: Value | Item): Value;\n  /**\n   * Checks if you have at least a specified amount of an item\n   * @param item Item to count\n   */\n  hasItem(item: Value | ItemNum): boolean;\n  /**\n   * Compares if an item of entity is of a specific type\n   */\n  isA(type: Value): boolean;\n  /**\n   * Checks if two entities are in the same power grid\n   * @param entity Second Entity\n   */\n  sameGrid(entity: Value): boolean;\n  /**\n   * Filters the passed entity\n   * @param filter1? Filter to check\n   * @param filter2? Second Filter\n   * @param filter3? Third Filter\n   */\n  match(filter1?: Value | RadarFilter, filter2?: Value | RadarFilter, filter3?: Value | RadarFilter): boolean;\n  /**\n   * Branches based on which unit is closer, optional branches for closer unit\n   */\n  nearerThan(unit_b: Value): boolean;\n  /**\n   * Attempt to solve explorable with inventory items\n   * @returns Missing repair item, scanner component or Unpowered\n   */\n  solve(): Value | undefined;\n}\n\n/**\n * Adds a number or coordinate to another number or coordinate\n */\ndeclare function add(to: Value | CoordNum, num: Value | CoordNum): Value;\n/**\n * Places a construction site for a specific structure\n * @param coordinate Target location, or at currently location if not specified\n * @param rotation? Building Rotation (0 to 3) (default 0)\n */\ndeclare function build(coordinate: Value | CoordNum, rotation?: Value | number): boolean;\n/**\n * Returns if a unit can produce an item\n * @param item Production Item\n * @param component? Optional Component to check (if Component not equipped)\n */\ndeclare function canProduce(item: Value | Item, component?: Value): boolean;\n/**\n * Divert program depending on number of Value and Compare\n * @param value The value to check with\n * @param compare The number to check against\n */\ndeclare function compareNumber(value: Value | number, compare: Value | number): \"=\" | \">\" | \"<\";\n/**\n * Checks if free space is available for an item and amount\n * @param item Item and amount to check can fit\n */\ndeclare function haveFreeSpace(item: Value | ItemNum): boolean;\n/**\n * Clears a research from queue, or entire queue if no tech passed\n * @param tech Tech to remove from research queue\n */\ndeclare function clearResearch(tech: Value): void;\n/**\n * Returns a coordinate made from x and y values\n */\ndeclare function combineCoordinate(x: Value, y: Value): Value;\n/**\n * Combine to make a register from separate parameters\n */\ndeclare function combineRegister(num?: Value, entity?: Value, x?: Value, y?: Value): Value;\n/**\n * Compares Entities\n */\ndeclare function compareEntity(entity_1: Value, entity_2: Value): boolean;\n/**\n * Compares Item or Unit type\n */\ndeclare function compareItem(value_1: Value, value_2: Value): boolean;\n/**\n * Connects Units from Logistics Network\n */\ndeclare function connect(): void;\n/**\n * Disable Unit to deliver on transport route\n */\ndeclare function disableTransportRoute(): void;\n/**\n * Disconnects Units from Logistics Network\n */\ndeclare function disconnect(): void;\n/**\n * Divides a number or coordinate from another number or coordinate\n */\ndeclare function div(from: Value | CoordNum, num: Value | CoordNum): Value;\n/**\n * Drop off items at a unit or destination\n\nIf a number is set it will drop off an amount to fill the target unit up to that amount\nIf unset it will try to drop off everything.\n * @param destination Unit or destination to bring items to\n * @param item_amount? Item and amount to drop off\n */\ndeclare function drop(destination: Value, item_amount?: Value | ItemNum): void;\n/**\n * Drop off items at a unit or destination\n\nIf a number is set it will drop off an amount to fill the target unit up to that amount\nIf unset it will try to drop off everything.\n * @param destination Unit or destination to bring items to\n * @param item_amount? Item and amount to drop off\n */\ndeclare function dropSpecificAmount(destination: Value, item_amount?: Value | ItemNum): void;\n/**\n * Moves to another unit or within a range of another unit\n * @param target Unit to move to, the number specifies the range in which to be in\n */\ndeclare function domove(target: Value): void;\n/**\n * Move to another unit while continuing the program\n * @param target Unit to move to\n */\ndeclare function domoveAsync(target: Value): void;\n/**\n * *DEPRECATED* Use Move Unit\n * @param target Unit to move to, the number specifies the range in which to be in\n */\ndeclare function domoveRange(target: Value): void;\n/**\n * Picks up a specific number of items from an entity\n\nWill try to pick up the specified amount, if no amount\nis specified it will try to pick up everything.\n * @param source Unit to take items from\n * @param item_amount? Item and amount to pick up\n */\ndeclare function pickup(source: Value, item_amount?: Value | ItemNum): void;\n/**\n * Enable Unit to deliver on transport route\n */\ndeclare function enableTransportRoute(): void;\n/**\n * Equips a component if it exists\n * @param component Component to equip\n * @param slot_index? Individual slot to equip component from\n */\ndeclare function equip(component: Value | Comp, slot_index?: Value | number): boolean;\n/**\n * Stops execution of the behavior\n */\ndeclare function exit(): never;\n/**\n * Counts the number of the passed item in your logistics network\n * @param item Item to count\n * @returns Number of this item in your faction\n */\ndeclare function factionItemAmount(item: Value | Item): Value | undefined;\n/**\n * Performs code for all entities in visibility range of the unit\n * @param range Range (up to units visibility range)\n * @param filter1? Filter to check\n * @param filter2? Second Filter\n * @param filter3? Third Filter\n * @returns Current Entity\n */\ndeclare function entitiesInRange(range: Value | number, filter1?: Value | RadarFilter, filter2?: Value | RadarFilter, filter3?: Value | RadarFilter): IterableIterator<Value>;\n/**\n * Loops through Inventory\n * @returns [Item Inventory, Items reserved for outgoing order or recipe, Items available, Space reserved for an incoming order, Remaining space]\n */\ndeclare function inventoryItems(): IterableIterator<[Value, Value, Value, Value, Value]>;\n/**\n * Loops through Ingredients\n * @returns Recipe Ingredient\n */\ndeclare function recipieIngredients(recipe: Value | Item): IterableIterator<Value>;\n/**\n * Performs code for all researchable tech\n * @returns Researchable Tech\n */\ndeclare function availableResearch(): IterableIterator<Value>;\n/**\n * *DEPRECATED* Use Loop Signal (Match) instead\n * @param signal Signal\n * @returns Entity with signal\n */\ndeclare function deprecatedSignals(signal: Value): IterableIterator<Value>;\n/**\n * Loops through all units with a signal of similar type\n * @param signal Signal\n * @returns [Entity with signal, Found signal]\n */\ndeclare function matchingSignals(signal: Value): IterableIterator<[Value, Value]>;\n/**\n * Collect information for running the auto base controller\n * @param range Range of operation\n */\ndeclare function gatherInformation(range: Value | number): void;\n/**\n * Gets the value of the Battery level as a percent\n */\ndeclare function getBattery(): Value;\n/**\n * Gets the closest visible entity matching a filter\n * @param filter1? Filter to check\n * @param filter2? Second Filter\n * @param filter3? Third Filter\n * @returns Entity\n */\ndeclare function getClosestEntity(filter1?: Value | RadarFilter, filter2?: Value | RadarFilter, filter3?: Value | RadarFilter): Value;\n/**\n * Reads a value from a component register\n * @param component_index Component and register number to set\n * @param group_index? Component group index if multiple are equipped\n */\ndeclare function getCompReg(component_index: Value | CompNum, group_index?: Value | number): Value;\n/**\n * Gets the best matching entity at a coordinate\n * @param coordinate Coordinate to get Entity from\n */\ndeclare function getEntityAt(coordinate: Value | CoordNum): Value;\n/**\n * Gets the first item where the locked slot exists but there is no item in it\n * @returns The first locked item id with no item\n */\ndeclare function getFirstLocked0(): Value;\n/**\n * Gets the value of the Grid Efficiency as a percent\n */\ndeclare function getGridEffeciency(): Value;\n/**\n * Gets a units health as a percentage, current and max\n * @param entity Entity to check\n * @returns [Percentage of health remaining, Value of health remaining, Value of maximum health]\n */\ndeclare function getHealth(entity: Value): [Value, Value, Value];\n/**\n * Returns the ingredients required to produce an item\n * @returns [First Ingredient, Second Ingredient, Third Ingredient]\n */\ndeclare function getIngredients(product: Value | Item): [Value, Value, Value];\n/**\n * Reads the first item in your inventory\n */\ndeclare function firstInventoryItem(): Value | undefined;\n/**\n * Reads the item contained in the specified slot index\n * @param index Slot index\n */\ndeclare function getInventoryItem(index: Value | number): Value | undefined;\n/**\n * Returns the amount an item can stack to\n * @param item Item to count\n * @returns Max Stack\n */\ndeclare function getMaxStack(item: Value | ItemNum): Value;\n/**\n * Returns the first active research tech\n * @returns First active research\n */\ndeclare function getResearch(): Value;\n/**\n * Gets the amount of resource\n * @param resource Resource Node to check\n */\ndeclare function getResourceNum(resource: Value): Value;\n/**\n * Gets the value of the Unit executing the behavior\n */\ndeclare function getSelf(): Value;\n/**\n * Gets the current world stability\n * @returns Stability\n */\ndeclare function getStability(): Value;\n/**\n * Gets the type from an item or entity\n */\ndeclare function getType(item_entity: Value): Value;\n/**\n * Gets the factions home unit\n * @returns Factions home unit\n */\ndeclare function gethome(): Value;\n/**\n * Divert program depending time of day\n */\ndeclare function daytime(): boolean;\n/**\n * Divert program depending time of day\n */\ndeclare function nighttime(): boolean;\n/**\n * Check if a specific component has been equipped\n * @param component Component to check\n * @returns Returns how many instances of a component equipped on this Unit\n */\ndeclare function isEquipped(component: Value | Comp): Value | undefined;\n/**\n * Check if a specific item slot index is fixed\n * @param slot_index Individual slot to check\n */\ndeclare function isFixed(slot_index: Value | number): boolean;\n/**\n * Checks whether a particular component is currently working\n * @param component_index Component to get\n * @param group_index? Component group index if multiple are equipped\n * @returns Returns the component ID currently working\n */\ndeclare function isWorking(component_index: Value | CompNum, group_index?: Value | number): Value | undefined;\n/**\n * Jumps execution to label with the same label id\n * @param label Label identifier\n */\ndeclare function jump(label: Value): void;\n/**\n * Labels can be jumped to from anywhere in a behavior\n * @param label Label identifier\n */\ndeclare function label(label: Value): void;\n/**\n * Tells a satellite that has been launched to land\n */\ndeclare function land(): void;\n/**\n * Launches a satellite if equipped on an AMAC\n */\ndeclare function launch(): void;\n/**\n * Run one instruction at a time\n */\ndeclare function lock(): void;\n/**\n * Fix all storage slots or a specific item slot index\n * @param item Item type to try fixing to the slots\n * @param slot_index Individual slot to fix\n */\ndeclare function lockSlots(item: Value | ItemNum, slot_index: Value | number): void;\n/**\n * Construct carrier bots for delivering orders or to use for other tasks\n * @param carriers Type and count of carriers to make\n */\ndeclare function makeCarrier(carriers: Value | FrameNum): boolean;\n/**\n * Construct and equip miner components on available carrier bots\n * @param resource_count Resource type and number of miners to maintain\n */\ndeclare function makeMiner(resource_count: Value | ItemNum): boolean;\n/**\n * Build and maintain dedicated production buildings\n * @param item_count Item type and number of producers to maintain\n * @param component Production component\n * @param building Building type to use as producer\n * @param location Location offset from self\n */\ndeclare function makeProducer(item_count: Value | ItemNum, component: Value | Comp, building: Value | Frame, location: Value | Coord): boolean;\n/**\n * Construct and equip turret components on available carrier bots\n * @param number Number of turret bots to maintain\n */\ndeclare function makeTurretBots(number: Value | number): boolean;\n/**\n * Mines a single resource\n * @param resource Resource to Mine\n */\ndeclare function mine(resource: Value | ResourceNum): \"ok\" | \"unable\" | \"full\";\n/**\n * Get the remainder of a division\n */\ndeclare function modulo(num: Value | CoordNum, by: Value | CoordNum): Value;\n/**\n * Moves towards a tile East of the current location at the specified distance\n * @param number Number of tiles to move East\n */\ndeclare function moveEast(number: Value | number): void;\n/**\n * Moves towards a tile North of the current location at the specified distance\n * @param number Number of tiles to move North\n */\ndeclare function moveNorth(number: Value | number): void;\n/**\n * Moves towards a tile South of the current location at the specified distance\n * @param number Number of tiles to move South\n */\ndeclare function moveSouth(number: Value | number): void;\n/**\n * Moves towards a tile West of the current location at the specified distance\n * @param number Number of tiles to move West\n */\ndeclare function moveWest(number: Value | number): void;\n/**\n * Moves out of range of another unit\n * @param target Unit to move away from\n */\ndeclare function moveawayRange(target: Value): void;\n/**\n * Multiplies a number or coordinate from another number or coordinate\n */\ndeclare function mul(to: Value | CoordNum, num: Value | CoordNum): Value;\n/**\n * Instruction has been removed, behavior needs to be updated\n */\ndeclare function nop(): void;\n/**\n * Triggers a faction notification\n * @param notify_value Notification Value\n */\ndeclare function notify(notify_value: Value): void;\n/**\n * Triggers a faction notification\n */\ndeclare function notify(text: string): void;\n/**\n * Triggers a faction notification\n * @param notify_value Notification Value\n */\ndeclare function notify(text: string, notify_value: Value): void;\n/**\n * Request Inventory to be sent to nearest shared storage with corresponding locked slots\n */\ndeclare function orderToSharedStorage(): void;\n/**\n * Transfers an Item to another Unit\n * @param target Target unit\n * @param item Item and amount to transfer\n */\ndeclare function orderTransfer(target: Value, item: Value | ItemNum): void;\n/**\n * Tries to pack all packable units into items\n */\ndeclare function packageAll(): void;\n/**\n * Gives you the percent that value is of Max Value\n * @param value Value to check\n * @param max_value Max Value to get percentage of\n * @returns Percent\n */\ndeclare function percentValue(value: Value, max_value: Value): Value;\n/**\n * Plays the Ping effect and notifies other players\n * @param target Target unit\n */\ndeclare function ping(target: Value): void;\n/**\n * Sets a production component to produce a blueprint\n */\ndeclare function produce(): void;\n/**\n * Reads the Radio signal on a specified band\n * @param band The band to check for\n * @returns Value of the radio signal\n */\ndeclare function readRadio(band: Value): Value;\n/**\n * Attempts to reads the internal key of the unit\n * @param frame Structure to read the key for\n * @returns Number key of structure\n */\ndeclare function readkey(frame: Value): Value;\n/**\n * Remaps a value between two ranges\n * @param value Value to Remap\n * @param input_low Low value for input\n * @param input_high High value for input\n * @param target_low Low value for target\n * @param target_high High value for target\n * @returns Remapped value\n */\ndeclare function remapValue(value: Value, input_low: Value, input_high: Value, target_low: Value, target_high: Value): Value;\n/**\n * Requests an item if it doesn't exist in the inventory\n * @param item Item and amount to order\n */\ndeclare function requestItem(item: Value | ItemNum): void;\n/**\n * Requests an item and waits until it exists in inventory\n * @param item Item and amount to order\n */\ndeclare function requestWait(item: Value | ItemNum): void;\n/**\n * Scan for the closest unit that matches the filters\n * @param filter_1? First filter\n * @param filter_2? Second filter\n * @param filter_3? Third filter\n */\ndeclare function radar(filter_1?: Value | RadarFilter, filter_2?: Value | RadarFilter, filter_3?: Value | RadarFilter): Value | undefined;\n/**\n * Moves in a scouting pattern around the factions home location\n */\ndeclare function scout(): void;\n/**\n * Branches based on which unit is closer, optional branches for closer unit\n * @returns Closest unit\n */\ndeclare function selectNearest(unit_a: Value, unit_b: Value): [\"next\" | \"A\" | \"B\", Value];\n/**\n * Split a coordinate into x and y values\n * @returns [x, y]\n */\ndeclare function separateCoordinate(coordinate: Value | CoordNum): [Value, Value];\n/**\n * Split a register into separate parameters\n * @returns [Num, Entity, ID, x, y]\n */\ndeclare function separateRegister(register: Value): [Value, Value, Value, Value, Value];\n/**\n * Produce materials needed in construction sites\n */\ndeclare function serveConstruction(): boolean;\n/**\n * Writes a value into a component register\n * @param component_index Component and register number to set\n * @param group_index? Component group index if multiple are equipped\n */\ndeclare function setCompReg(value: Value, component_index: Value | CompNum, group_index?: Value | number): void;\n/**\n * Sets the numerical/coordinate part of a value\n */\ndeclare function setNumber(value: Value, num_coord: Value | CoordNum): Value;\n/**\n * Returns the first active research tech\n * @param tech First active research\n */\ndeclare function setResearch(tech: Value): void;\n/**\n * Set the signpost to specific text\n */\ndeclare function setSignpost(text: string): void;\n/**\n * Shuts down the power of the Unit\n */\ndeclare function shutdown(): void;\n/**\n * Sorts Storage Containers on Unit\n */\ndeclare function sortStorage(): void;\n/**\n * Stop movement and abort what is currently controlling the entities movement\n */\ndeclare function stop(): void;\n/**\n * Subtracts a number or coordinate from another number or coordinate\n */\ndeclare function sub(from: Value | CoordNum, num: Value | CoordNum): Value;\n/**\n * Turns on the power of the Unit\n */\ndeclare function turnon(): void;\n/**\n * Unequips a component if it exists\n * @param component Component to unequip\n * @param slot_index? Individual slot to try to unequip component from\n */\ndeclare function unequip(component: Value | Comp, slot_index?: Value | number): boolean;\n/**\n * Run as many instructions as possible. Use wait instructions to throttle execution.\n */\ndeclare function unlock(): void;\n/**\n * Unfix all inventory slots or a specific item slot index\n * @param slot_index Individual slot to unfix\n */\ndeclare function unlockSlots(slot_index: Value | number): void;\n/**\n * Tries to unpack all packaged items\n */\ndeclare function unpackageAll(): void;\n/**\n * Pauses execution of the behavior until 1 or more ticks later\n * @param time Number of ticks to wait\n */\ndeclare function wait(time: Value | number): void;\n\ndeclare const self: Value;\ndeclare var goto: Value;\ndeclare var store: Value;\ndeclare var visual: Value;\ndeclare var signal: Value;\n\ninterface String extends BaseValue {\n  // Required by typescript since String already has a method named match\n  match(filter1?: Value | RadarFilter, filter2?: Value | RadarFilter, filter3?: Value | RadarFilter): boolean;\n}\ninterface Number extends BaseValue {}\n\ntype Value = Coord | ItemNum | FrameNum | RadarFilter | ColorNum | ExtraNum;\ninterface Coord extends BaseValue, Array<number> {}\ntype CoordNum = Coord | number;\n\ninterface NumPair<T> extends BaseValue {\n  id: T,\n  num: number\n}\n\ntype ColorNum = Color | number | NumPair<Color>;\ntype Color =\n  | \"v_color_black\" | \"Black\"\n  | \"v_color_blue\" | \"Blue\"\n  | \"v_color_brown\" | \"Brown\"\n  | \"v_color_crimson\" | \"Crimson\"\n  | \"v_color_cyan\" | \"Cyan\"\n  | \"v_color_dark_grey\" | \"Dark Gray\"\n  | \"v_color_green\" | \"Green\"\n  | \"v_color_light_green\" | \"Light Green\"\n  | \"v_color_light_grey\" | \"Light Gray\"\n  | \"v_color_magenta\" | \"Magenta\"\n  | \"v_color_pastel\" | \"Pastel\"\n  | \"v_color_pink\" | \"Pink\"\n  | \"v_color_red\" | \"Red\"\n  | \"v_color_white\" | \"White\"\n  | \"v_color_yellow\" | \"Yellow\";\n\ntype ExtraNum = Extra | number | NumPair<Extra>;\ntype Extra =\n  | \"v_alert\"\n  | \"v_arrow_down\" | \"Arrow Down\"\n  | \"v_arrow_downleft\" | \"Arrow Down left\"\n  | \"v_arrow_downright\" | \"Arrow Down Right\"\n  | \"v_arrow_left\" | \"Arrow Left\"\n  | \"v_arrow_right\" | \"Arrow Right\"\n  | \"v_arrow_up\" | \"Arrow Up\"\n  | \"v_arrow_upleft\" | \"Arrow Up Left\"\n  | \"v_arrow_upright\" | \"Arrow Up Right\"\n  | \"v_letter_A\" | \"A\"\n  | \"v_letter_B\" | \"B\"\n  | \"v_letter_C\" | \"C\"\n  | \"v_letter_D\" | \"D\"\n  | \"v_letter_E\" | \"E\"\n  | \"v_letter_F\" | \"F\"\n  | \"v_letter_G\" | \"G\"\n  | \"v_letter_H\" | \"H\"\n  | \"v_letter_I\" | \"I\"\n  | \"v_letter_J\" | \"J\"\n  | \"v_letter_K\" | \"K\"\n  | \"v_letter_L\" | \"L\"\n  | \"v_letter_M\" | \"M\"\n  | \"v_letter_N\" | \"N\"\n  | \"v_letter_O\" | \"O\"\n  | \"v_letter_P\" | \"P\"\n  | \"v_letter_Q\" | \"Q\"\n  | \"v_letter_R\" | \"R\"\n  | \"v_letter_S\" | \"S\"\n  | \"v_letter_T\" | \"T\"\n  | \"v_letter_U\" | \"U\"\n  | \"v_letter_V\" | \"V\"\n  | \"v_letter_W\" | \"W\"\n  | \"v_letter_X\" | \"X\"\n  | \"v_letter_Y\" | \"Y\"\n  | \"v_letter_Z\" | \"Z\"\n  | \"v_lock_locked\" | \"Locked\"\n  | \"v_lock_unlocked\" | \"Unlocked\"\n  | \"v_number_0\" | \"0\"\n  | \"v_number_1\" | \"1\"\n  | \"v_number_2\" | \"2\"\n  | \"v_number_3\" | \"3\"\n  | \"v_number_4\" | \"4\"\n  | \"v_number_5\" | \"5\"\n  | \"v_number_6\" | \"6\"\n  | \"v_number_7\" | \"7\"\n  | \"v_number_8\" | \"8\"\n  | \"v_number_9\" | \"9\"\n  | \"v_octagon\" | \"Octagon\"\n  | \"v_pentagon\" | \"Pentagon\"\n  | \"v_star\" | \"Star\"\n  | \"v_transport_route\" | \"Transport Route\";\n\ntype RadarFilter =\n  | Resource\n  | \"v_alien_faction\" | \"Alien\"\n  | \"v_ally_faction\" | \"Ally\"\n  | \"v_anomaly\" | \"Anomaly\"\n  | \"v_blight\" | \"Blight\"\n  | \"v_bot\" | \"Unit\"\n  | \"v_broken\" | \"Broken\"\n  | \"v_bug_faction\" | \"Bug\"\n  | \"v_building\" | \"Building\"\n  | \"v_can_loot\" | \"Can Loot\"\n  | \"v_construction\" | \"Construction\"\n  | \"v_damaged\" | \"Damaged\"\n  | \"v_droppeditem\" | \"Dropped Item\"\n  | \"v_emergency\" | \"Emergency\"\n  | \"v_enemy_faction\" | \"Enemy\"\n  | \"v_human_faction\" | \"Human\"\n  | \"v_idle\" | \"Idle\"\n  | \"v_in_powergrid\" | \"In Power Grid\"\n  | \"v_infected\" | \"Infected\"\n  | \"v_is_foundation\" | \"Foundation\"\n  | \"v_mineable\" | \"Mineable\"\n  | \"v_mothership\" | \"Mothership\"\n  | \"v_moving\" | \"Moving\"\n  | \"v_not_blight\" | \"Not Blight\"\n  | \"v_own_faction\" | \"Owned\"\n  | \"v_pathblocked\" | \"PathBlocked\"\n  | \"v_plateau\" | \"Plateau\"\n  | \"v_powereddown\" | \"PoweredDown\"\n  | \"v_resource\" | \"Resource\"\n  | \"v_robot_faction\" | \"Robot\"\n  | \"v_solved\" | \"Solved\"\n  | \"v_unpowered\" | \"Unpowered\"\n  | \"v_unsolved\" | \"Unsolved\"\n  | \"v_valley\" | \"Valley\"\n  | \"v_world_faction\" | \"World\";\n\ntype ItemNum = Item | number | NumPair<Item>;\ntype Item =\n  | Comp\n  | Resource\n  | \"adv_data\" | \"Compressed Simulation Data\"\n  | \"alien_ai_core\" | \"Alien AI Core\"\n  | \"alien_databank\" | \"Alien Data Bank\"\n  | \"alien_datacube\" | \"Alien Datacube\"\n  | \"alien_research\" | \"Alien Research\"\n  | \"aluminiumrod\" | \"Aluminum Rod\"\n  | \"aluminiumsheet\" | \"Aluminum Sheet\"\n  | \"anomaly_cluster\" | \"Dense Anomaly Cluster\"\n  | \"anomaly_heart\" | \"Anomaly Heart\"\n  | \"anomaly_particle\" | \"Anomaly Particle\"\n  | \"beacon_frame\" | \"Beacon Kit\"\n  | \"blight_databank\" | \"Blight Data Bank\"\n  | \"blight_datacube\" | \"Blight Datacube\"\n  | \"blight_plasma\" | \"Blight Plasma\"\n  | \"blight_research\" | \"Blight Research\"\n  | \"blightbar\" | \"Blight Bar\"\n  | \"bot_ai_core\" | \"AI Core\"\n  | \"broken_ai_core\" | \"Broken AI Core\"\n  | \"cable\" | \"Cable\"\n  | \"ceramictiles\" | \"Ceramic Tiles\"\n  | \"circuit_board\" | \"Circuit Board\"\n  | \"concreteslab\" | \"Concretes Lab\"\n  | \"cpu\" | \"CPU\"\n  | \"crystal_powder\" | \"Crystal Powder\"\n  | \"datacube_matrix\" | \"Datacube Matrix\"\n  | \"datakey\" | \"Datakey\"\n  | \"datakey_alien\" | \"Alien Datakey\"\n  | \"datakey_blight\" | \"Blight Datakey\"\n  | \"datakey_human\" | \"Human Datakey\"\n  | \"datakey_robot\" | \"Robot Datakey\"\n  | \"datakey_virus\" | \"Virus Datakey\"\n  | \"drone_adv_miner_package\" | \"Advanced Miner Drone Package\"\n  | \"drone_defense_package1\" | \"Defense Drone Package\"\n  | \"drone_miner_package\" | \"Miner Drone Package\"\n  | \"drone_transfer_package\" | \"Drone Package\"\n  | \"drone_transfer_package2\" | \"Transfer Drone Package\"\n  | \"elain_ai_core\" | \"ELAIN's AI Core\"\n  | \"empty_databank\" | \"Empty Data Bank\"\n  | \"energized_plate\" | \"Energized Plate\"\n  | \"engine\" | \"Engine\"\n  | \"flyer_package_m\" | \"Medium Flyer Package\"\n  | \"foundationplate\" | \"Foundation Plate\"\n  | \"fused_electrodes\" | \"Fused Electrodes\"\n  | \"hdframe\" | \"High-Density Frame\"\n  | \"higgs_ai_ac\" | \"HIGGS's AI Core\"\n  | \"higgs_oop_ai_core\" | \"HIGGS's Out-of-Phase AI Core \"\n  | \"human_databank\" | \"Human Data Bank\"\n  | \"human_datacube\" | \"Human Datacube\"\n  | \"human_research\" | \"Human Research\"\n  | \"icchip\" | \"IC Chip\"\n  | \"infected_circuit_board\" | \"Infected Circuit Board\"\n  | \"ldframe\" | \"Low-Density Frame\"\n  | \"metalbar\" | \"Metal Bar\"\n  | \"metalplate\" | \"Metal Plate\"\n  | \"micropro\" | \"Microprocessor\"\n  | \"microscope\" | \"Microscope\"\n  | \"obsidian_brick\" | \"Obsidian Brick\"\n  | \"optic_cable\" | \"Optic Cable\"\n  | \"phase_leaf\" | \"Phase Leaf\"\n  | \"polymer\" | \"Polymer\"\n  | \"power_petal\" | \"Power Petal\"\n  | \"rainbow_research\" | \"MultiCube - CURRENTLY NOT OBTAINABLE\"\n  | \"refined_crystal\" | \"Refined Crystal\"\n  | \"reinforced_plate\" | \"Reinforced Plate\"\n  | \"resimulator_core\" | \"Resimulator Core\"\n  | \"robot_datacube\" | \"Robotics Datacube\"\n  | \"robot_research\" | \"Robotics Research\"\n  | \"satellite_package\" | \"Satellite Package\"\n  | \"silicon\" | \"Silicon\"\n  | \"smallreactor\" | \"Small Modular Reactor\"\n  | \"steelblock\" | \"Steel Block\"\n  | \"transformer\" | \"Transformer\"\n  | \"virus_research\" | \"Virus Research\"\n  | \"virus_research_data\" | \"Virus Datacube\"\n  | \"virus_source_code\" | \"Virus Source Code\"\n  | \"wire\" | \"Wire\";\n\ntype CompNum = Comp | number | NumPair<Comp>;\ntype Comp =\n  | \"c_adv_miner\" | \"Laser Mining Tool\"\n  | \"c_adv_portable_turret\" | \"Small Advanced Turret\"\n  | \"c_ai_bot_behavior\" | \"AI Bot\"\n  | \"c_aibase_trigger\" | \"c_aibase_trigger\"\n  | \"c_alien_ac\" | \"Alien Simulation Core\"\n  | \"c_alien_attack\" | \"Alien Attack\"\n  | \"c_alien_container_i\" | \"Internal Alien Container\"\n  | \"c_alien_core\" | \"Alien_Core\"\n  | \"c_alien_extractor\" | \"Alien Extractor\"\n  | \"c_alien_factory\" | \"Alien Factory\"\n  | \"c_alien_feeder\" | \"Alien Feeder\"\n  | \"c_alien_key\" | \"Alien Decryption Key\"\n  | \"c_alien_liquid_fx\" | \"Alien Liquid\"\n  | \"c_alien_lock\" | \"Alien Lock\"\n  | \"c_alien_miner\" | \"Alien Miner\"\n  | \"c_alien_research\"\n  | \"c_alien_stealth\" | \"Alien Stealth Module\"\n  | \"c_alien_translator\" | \"Alien Translator\"\n  | \"c_alien_unit\" | \"Alien Unit\"\n  | \"c_anomaly_container_i\" | \"Internal Anomaly Containment\"\n  | \"c_anomaly_event\"\n  | \"c_anomaly_go_home\" | \"c_anomaly_go_home\"\n  | \"c_anomaly_resimulator_trigger\" | \"c_anomaly_resimulator_trigger\"\n  | \"c_antlers1s\" | \"Antlers\"\n  | \"c_antlersnose1s\" | \"Antlers Nose\"\n  | \"c_assembler\" | \"Assembler\"\n  | \"c_autobase\" | \"AI Behavior Controller\"\n  | \"c_battery\" | \"Medium Battery\"\n  | \"c_behavior\" | \"Behavior Controller\"\n  | \"c_big_daikon_trigger\" | \"c_big_daikon_trigger\"\n  | \"c_blight_a_trigger\" | \"c_blight_a_trigger\"\n  | \"c_blight_ac\" | \"Blight Simulation Core\"\n  | \"c_blight_antenna\" | \"Blight Stabilizer\"\n  | \"c_blight_container_i\" | \"Internal Blight Container\"\n  | \"c_blight_container_m\" | \"Blight Container Medium\"\n  | \"c_blight_container_s\" | \"Blight Container Small\"\n  | \"c_blight_control\" | \"Blight Control Tower\"\n  | \"c_blight_converter\" | \"Resource Converter\"\n  | \"c_blight_extractor\" | \"Blight Extractor\"\n  | \"c_blight_magnifier\" | \"Blight Magnifier\"\n  | \"c_blight_power\" | \"Blight Power Generator\"\n  | \"c_blight_shield\" | \"Blight Charger\"\n  | \"c_blight_terraformer\" | \"Alien Terraformer\"\n  | \"c_bug_a_repair\" | \"Mining base repairs\"\n  | \"c_bug_capture_trigger\" | \"c_bug_capture_trigger\"\n  | \"c_bug_homeless\" | \"Homeless Bug\"\n  | \"c_bug_mission_trigger\" | \"c_bug_mission_trigger\"\n  | \"c_bug_spawn\" | \"Bug Hive Spawner\"\n  | \"c_bug_spawner_large\" | \"c_bug_spawner_large\"\n  | \"c_capacitor\" | \"Capacitor\"\n  | \"c_carrier_factory\" | \"Robot Factory\"\n  | \"c_construction\" | \"Constructor\"\n  | \"c_crane\"\n  | \"c_crystal_power\" | \"Crystal Power\"\n  | \"c_damage_plant\" | \"Damage Plant\"\n  | \"c_damage_plant_internal\" | \"Damage Planet Internal\"\n  | \"c_damageself\" | \"Damage on Trigger\"\n  | \"c_data_analyzer\" | \"Data Analyzer\"\n  | \"c_deconstructor\" | \"Deconstructor\"\n  | \"c_deploy_construction\" | \"Deployment Constructor\"\n  | \"c_deployer\" | \"Deployer\"\n  | \"c_deployment\" | \"Deployment\"\n  | \"c_destroyself\" | \"Destroy on Trigger\"\n  | \"c_disappear_empty\" | \"Glitch Building\"\n  | \"c_drone_comp\" | \"Drone Component\"\n  | \"c_drone_launcher\" | \"Drone Launcher\"\n  | \"c_drone_port\" | \"Drone Port\"\n  | \"c_explorable_admin_fix\" | \"Admin Console\"\n  | \"c_explorable_autosolve\" | \"c_explorable_autosolve\"\n  | \"c_explorable_balance\" | \"Balance Minigame\"\n  | \"c_explorable_fix\" | \"Repair Required\"\n  | \"c_explorable_fix_lvl2\" | \"Datakey Socket\"\n  | \"c_explorable_netwalk\" | \"Netwalk Minigame\"\n  | \"c_explorable_nineclicks\" | \"Nine Clicks Minigame\"\n  | \"c_explorable_scannable\" | \"Intel Scanner\"\n  | \"c_explorable_slide\" | \"Slide Minigame\"\n  | \"c_extractor\" | \"Laser Extractor\"\n  | \"c_fabricator\" | \"Fabricator\"\n  | \"c_fusion_generator\"\n  | \"c_glitch\" | \"Glitch\"\n  | \"c_hacking_tool\" | \"Hacking Tool\"\n  | \"c_higgs_inserter\" | \"AI CORE Access\"\n  | \"c_higrade_capacitor\" | \"Hi-grade Capacitor\"\n  | \"c_human_ac\" | \"Human Simulation Core\"\n  | \"c_human_barracks\" | \"Human Barracks\"\n  | \"c_human_commandcenter\" | \"Human Command Center\"\n  | \"c_human_factory\"\n  | \"c_human_factory_robots\" | \"Human Factory\"\n  | \"c_human_refinery\" | \"Human Refinery\"\n  | \"c_human_science\" | \"Human Science\"\n  | \"c_human_science_analyzer_robots\" | \"Human Science Analyzer\"\n  | \"c_human_spaceport\" | \"Human Spaceport\"\n  | \"c_human_tank_turret\" | \"Tank Turret\"\n  | \"c_integrated_capacitor\" | \"Integrated Capacitor\"\n  | \"c_intel_extractor\" | \"Intel Extractor\"\n  | \"c_internal_crane1\"\n  | \"c_internal_crane2\" | \"Item Transporter\"\n  | \"c_internal_storage\" | \"Internal Storage\"\n  | \"c_landing_pad\" | \"Landing Pad\"\n  | \"c_large_battery\" | \"Large Battery\"\n  | \"c_large_power_relay\" | \"Large Power Field\"\n  | \"c_large_power_transmitter\" | \"Large Power Transmitter\"\n  | \"c_large_storage\" | \"Large Storage\"\n  | \"c_laser_turret\" | \"Laser Turret\"\n  | \"c_launch_pad\" | \"Launch Pad\"\n  | \"c_light\" | \"Light\"\n  | \"c_light_rgb\" | \"Light RGB\"\n  | \"c_medium_capacitor\" | \"Medium Capacitor\"\n  | \"c_medium_storage\" | \"Medium Storage\"\n  | \"c_miner\" | \"Miner\"\n  | \"c_missile_turret\" | \"Missile Launcher\"\n  | \"c_mission_human_a_repair\" | \"Repairs\"\n  | \"c_mission_human_a_trigger\" | \"c_mission_human_a_trigger\"\n  | \"c_mission_human_aicenter\"\n  | \"c_mission_human_b_trigger\" | \"c_mission_human_b_trigger\"\n  | \"c_mission_human_b_upgraded_trigger\" | \"c_mission_human_b_upgraded_trigger\"\n  | \"c_mission_human_docker\" | \"Explorer\"\n  | \"c_moduleefficiency\" | \"Internal Efficiency Module\"\n  | \"c_moduleefficiency_l\" | \"Large Efficiency Module\"\n  | \"c_moduleefficiency_m\" | \"Medium Efficiency Module\"\n  | \"c_moduleefficiency_s\" | \"Small Efficiency Module\"\n  | \"c_modulehealth\" | \"Internal Health Module\"\n  | \"c_modulehealth_l\" | \"Large Health Module\"\n  | \"c_modulehealth_m\" | \"Medium Health Module\"\n  | \"c_modulehealth_s\" | \"Small Health Module\"\n  | \"c_modulespeed\" | \"Internal Speed Module\"\n  | \"c_modulespeed_l\" | \"Large Speed Module\"\n  | \"c_modulespeed_m\" | \"Medium Speed Module\"\n  | \"c_modulespeed_s\" | \"Small Speed Module\"\n  | \"c_modulevisibility\" | \"Internal Visibility Module\"\n  | \"c_modulevisibility_l\" | \"Large Visibility Module\"\n  | \"c_modulevisibility_m\" | \"Medium Visibility Module\"\n  | \"c_modulevisibility_s\" | \"Small Visibility Module\"\n  | \"c_mothership_eject\" | \"Mothership Eject\"\n  | \"c_mothership_repair\" | \"Mothership Repairs\"\n  | \"c_particle_birds\" | \"c_particle_birds\"\n  | \"c_particle_leaves\" | \"c_particle_leaves\"\n  | \"c_phase_plant\" | \"Phase Plant\"\n  | \"c_photon_cannon\" | \"Photon Cannon\"\n  | \"c_plasma_cannon\" | \"Plasma Cannon\"\n  | \"c_plasma_turret\" | \"Plasma Turret\"\n  | \"c_portable_radar\" | \"Portable Radar\"\n  | \"c_portable_relay\" | \"Portable Power Field\"\n  | \"c_portable_teleporter\" | \"Alien Portable Teleporter\"\n  | \"c_portable_turret\" | \"Small Turret\"\n  | \"c_portable_turret_green\" | \"Viral Turret\"\n  | \"c_portable_turret_red\" | \"Blight Turret\"\n  | \"c_portablecrane\" | \"Portable Transporter\"\n  | \"c_power_cell\" | \"Power Cell\"\n  | \"c_power_core\" | \"Power Core\"\n  | \"c_power_relay\" | \"Power Field\"\n  | \"c_power_transmitter\" | \"Power Transmitter\"\n  | \"c_power_unit\" | \"Power Unit\"\n  | \"c_present1s\"\n  | \"c_radar\" | \"Long-range Radar\"\n  | \"c_radio_receiver\" | \"Radio Receiver\"\n  | \"c_radio_storage\" | \"c_radio_storage\"\n  | \"c_radio_transmitter\" | \"Radio Transmitter\"\n  | \"c_refinery\" | \"Refinery\"\n  | \"c_repairer\" | \"Repair Component\"\n  | \"c_repairer_aoe\" | \"AOE Repair Component\"\n  | \"c_repairkit\" | \"Repair Kit\"\n  | \"c_repairport\" | \"Repair Garage\"\n  | \"c_resimulator\" | \"Re-simulator Core\"\n  | \"c_robot_ac\" | \"Robot Simulation Core\"\n  | \"c_robotics_factory\" | \"Robotics Assembler\"\n  | \"c_santahat\" | \"Santa Hat\"\n  | \"c_satellite\" | \"Satellite Unit\"\n  | \"c_satellite_launcher\" | \"Satellite Launcher\"\n  | \"c_scout_radar\" | \"Scout Radar\"\n  | \"c_selfdisassemble\" | \"Packager\"\n  | \"c_shared_storage\" | \"Shared Storage\"\n  | \"c_shield_generator\" | \"Portable Shield Generator\"\n  | \"c_shield_generator2\" | \"Shield Generator\"\n  | \"c_shield_generator3\" | \"Hyper Shield Generator\"\n  | \"c_signal_reader\" | \"Signal Reader\"\n  | \"c_signpost\" | \"Sign Post\"\n  | \"c_simulation_interface\" | \"Simulation Interface\"\n  | \"c_small_battery\" | \"Small Battery\"\n  | \"c_small_radar\" | \"Small Radar\"\n  | \"c_small_relay\" | \"Small Power Field\"\n  | \"c_small_scanner\" | \"Small Intel Scanner\"\n  | \"c_small_storage\" | \"Small Storage\"\n  | \"c_solar_cell\" | \"Solar Cell\"\n  | \"c_solar_panel\" | \"Solar Panel\"\n  | \"c_space_elevator_factory\"\n  | \"c_stealth\" | \"c_stealth\"\n  | \"c_terraformer\" | \"Purifying Terraformer\"\n  | \"c_trilobyte_attack\" | \"Trilobyte Attack\"\n  | \"c_trilobyte_attack1\" | \"c_trilobyte_attack1\"\n  | \"c_trilobyte_attack2\" | \"c_trilobyte_attack2\"\n  | \"c_trilobyte_attack3\" | \"c_trilobyte_attack3\"\n  | \"c_trilobyte_attack4\" | \"c_trilobyte_attack4\"\n  | \"c_trilobyte_consume\" | \"Trilobyte Consume\"\n  | \"c_turret\" | \"Turret\"\n  | \"c_turret_powerflower\" | \"Drain Turret\"\n  | \"c_turret_powerflower_effect\" | \"Drain Turret Internal\"\n  | \"c_unit_teleport\" | \"Unit Teleporter\"\n  | \"c_uplink\" | \"Uplink\"\n  | \"c_virus\" | \"Virus\"\n  | \"c_virus_ac\" | \"Virus Simulation Core\"\n  | \"c_virus_bitlock\" | \"Crypto BitLock\"\n  | \"c_virus_bitlock_effect\" | \"BitLock Effect\"\n  | \"c_virus_container_i\" | \"Internal Virus Containment\"\n  | \"c_virus_cure\" | \"Virus Cure\"\n  | \"c_virus_decomposer\" | \"Robot Hive\"\n  | \"c_virus_jamming\" | \"Virus Ray\"\n  | \"c_virus_possess\" | \"Blight Destabilizer\"\n  | \"c_virus_possessor\" | \"Virus Possessor\"\n  | \"c_virus_protection\" | \"Virus Protection\"\n  | \"c_virus_recycler\" | \"Component Recycler\"\n  | \"c_virus_turret\" | \"Virus Bug Turret\"\n  | \"c_wind_turbine\" | \"Wind Turbine\"\n  | \"c_wind_turbine_l\" | \"Large Wind Turbine\";\n\ntype ResourceNum = Resource | number | NumPair<Resource>;\ntype Resource =\n  | \"alien_artifact\" | \"Alien Artifact\"\n  | \"alien_artifact_research\" | \"Research Artifact\"\n  | \"blight_crystal\" | \"Blight Crystal Chunk\"\n  | \"blight_extraction\" | \"Blight Extraction\"\n  | \"bug_carapace\" | \"Bug Chitin\"\n  | \"crystal\" | \"Crystal Chunk\"\n  | \"energized_artifact\" | \"Energized Artifact\"\n  | \"laterite\" | \"Laterite ore\"\n  | \"metalore\" | \"Metal Ore\"\n  | \"obsidian\" | \"Obsidian chunk\"\n  | \"silica\" | \"Silica sand\";\n\ntype FrameNum = Frame | number | NumPair<Frame>;\ntype Frame =\n  | \"f_alien_console\" | \"Console\"\n  | \"f_alien_explorable\" | \"Alien Explorable\"\n  | \"f_alien_heart_shard\" | \"Heart Shard\"\n  | \"f_alien_monolith\" | \"Monolith\"\n  | \"f_alien_observer\" | \"Alien Observer\"\n  | \"f_alien_soldier\" | \"Alien Soldier\"\n  | \"f_alien_time_egg\" | \"Time Egg\"\n  | \"f_alien_worker\" | \"Alien Worker\"\n  | \"f_amac\" | \"AMAC\"\n  | \"f_anomaly_sim\" | \"Anomaly Resimulator\"\n  | \"f_beacon\" | \"Beacon\"\n  | \"f_beacon_l\" | \"Large Beacon\"\n  | \"f_blight_peekaboo\" | \"???\"\n  | \"f_blocking_feature\" | \"Land Feature\"\n  | \"f_bot_1l_a\" | \"Rock\"\n  | \"f_bot_1m_a\" | \"Cub\"\n  | \"f_bot_1m_b\" | \"Hauler\"\n  | \"f_bot_1m_c\" | \"Mark V\"\n  | \"f_bot_1m1s\" | \"Hound\"\n  | \"f_bot_1s_a\" | \"Worker\"\n  | \"f_bot_1s_adw\" | \"Engineer\"\n  | \"f_bot_1s_as\" | \"Scout\"\n  | \"f_bot_1s_b\" | \"Dashbot\"\n  | \"f_bot_2m_as\" | \"Command Center\"\n  | \"f_bot_2s\" | \"Twinbot\"\n  | \"f_bug_hive\" | \"Bug Hive\"\n  | \"f_bug_hive_large\" | \"Large Bug Hive\"\n  | \"f_bug_hole\"\n  | \"f_bug_home\" | \"Bug Hole\"\n  | \"f_building_fg\" | \"Fusion Generator\"\n  | \"f_building_pf\" | \"Particle Forge\"\n  | \"f_building_sim\" | \"Re-simulator\"\n  | \"f_building_simulator\" | \"Simulator\"\n  | \"f_building1x1a\" | \"Building 1x1 (1M)\"\n  | \"f_building1x1b\" | \"Building 1x1 (L)\"\n  | \"f_building1x1c\" | \"Building 1x1 (2S)\"\n  | \"f_building1x1d\" | \"Building 1x1 (1S)\"\n  | \"f_building1x1e\" | \"Storage Block (24)\"\n  | \"f_building1x1f\" | \"Storage Block (8)\"\n  | \"f_building1x1g\" | \"Storage Block (16)\"\n  | \"f_building2x1a\" | \"Building 2x1 (2M)\"\n  | \"f_building2x1b\" | \"Building 2x1 (1M1L)\"\n  | \"f_building2x1c\"\n  | \"f_building2x1d\"\n  | \"f_building2x1e\" | \"Building 2x1 (2S1M)\"\n  | \"f_building2x1f\" | \"Building 2x1 (1M1S)\"\n  | \"f_building2x1g\" | \"Building 2x1 (1M)\"\n  | \"f_building2x2a\"\n  | \"f_building2x2b\" | \"Building 2x2 (3M)\"\n  | \"f_building2x2c\"\n  | \"f_building2x2d\" | \"Building 2x2 (2M1L)\"\n  | \"f_building2x2e\" | \"Building 2x2 (1M3S)\"\n  | \"f_building2x2f\" | \"Building 2x2 (2M)\"\n  | \"f_building3x2a\" | \"Building 3x2 (1L3M)\"\n  | \"f_building3x2b\" | \"Building 3x2 (2M2S)\"\n  | \"f_carrier_bot\" | \"Runner\"\n  | \"f_charcharosaurus1\" | \"Gigakaiju\"\n  | \"f_construction\"\n  | \"f_damage_plant\" | \"Power Flower\"\n  | \"f_drone_adv_miner\" | \"Advanced Miner Drone\"\n  | \"f_drone_defense_a\" | \"Defense Drone\"\n  | \"f_drone_miner_a\" | \"Miner Drone\"\n  | \"f_drone_transfer_a\" | \"Drone\"\n  | \"f_drone_transfer_a2\" | \"Transfer Drone\"\n  | \"f_dropped_item\"\n  | \"f_dropped_resource\" | \"Scattered Resource\"\n  | \"f_empty\"\n  | \"f_explorable\" | \"Explorable\"\n  | \"f_explorable_glitch\" | \"Explorable Glitch\"\n  | \"f_explorable_spaceelevator\" | \"Space Elevator\"\n  | \"f_exploreable_bot_glitch\" | \"Small Bot Glitch\"\n  | \"f_feature\" | \"Feature\"\n  | \"f_floating_feature\"\n  | \"f_flyer_bot\" | \"Flyer Bot\"\n  | \"f_flyer_m\" | \"Shuttle Bot\"\n  | \"f_forestleaves\"\n  | \"f_foundation\"\n  | \"f_gastarias1\" | \"Scale Worm\"\n  | \"f_gastarid1\" | \"Ravager\"\n  | \"f_gate\" | \"Gate\"\n  | \"f_giant_home\" | \"Giant Beast\"\n  | \"f_human_ai_research\" | \"AI Research Center\"\n  | \"f_human_explorable\" | \"Human Explorable\"\n  | \"f_human_explorable_5x5\" | \"Data Complex\"\n  | \"f_human_explorer\" | \"Human Explorer\"\n  | \"f_human_explorer_broken\" | \"Human Explorer (Broken)\"\n  | \"f_human_explorer_upgraded\" | \"AI Explorer\"\n  | \"f_human_flyer\" | \"Human Flyer\"\n  | \"f_human_foundation\" | \"Human Foundation\"\n  | \"f_human_foundation_basic\" | \"Basic Human Foundation\"\n  | \"f_human_miner\" | \"Human Miner Mech\"\n  | \"f_human_tank\" | \"Human Tank\"\n  | \"f_landingpod\"\n  | \"f_mining_base\" | \"Miner Base (Abandoned)\"\n  | \"f_mothership\"\n  | \"f_particlespawner\" | \"Particle Spawner\"\n  | \"f_phase_plant\" | \"Phase Flower\"\n  | \"f_present1x1\" | \"Present\"\n  | \"f_resourcenode_blightcrystal\" | \"Resource Blight Crystal\"\n  | \"f_resourcenode_crystal\" | \"Resource Crystal\"\n  | \"f_resourcenode_laterite\" | \"Resource Laterite\"\n  | \"f_resourcenode_metal\" | \"Resource Metal\"\n  | \"f_resourcenode_obsidian\" | \"Resource Obsidian\"\n  | \"f_resourcenode_silica\" | \"Resource Silica\"\n  | \"f_resourcenode_tree\" | \"Silica Tree\"\n  | \"f_roamingbot\" | \"Curious Bot\"\n  | \"f_satellite\" | \"Satellite\"\n  | \"f_scaramar1\" | \"Malika\"\n  | \"f_scaramar2\" | \"Mothika\"\n  | \"f_spacedrop\" | \"Drop Ship\"\n  | \"f_transport_bot\" | \"Transport Bot\"\n  | \"f_trilobyte1\" | \"Trilobyte\"\n  | \"f_wall\" | \"Wall\"\n  | \"f_wall_bli\" | \"Blight Wall\"\n  | \"f_wall_vir\" | \"Virus Wall\"\n  | \"f_world_big_daikon\" | \"Super Silica Tree\";\n\ndeclare function coord(x: number, y: number): Coord;\ndeclare function value(id: Comp, num: number): NumPair<Comp>;\ndeclare function value(id: Item, num: number): NumPair<Item>;\ndeclare function value(id: Resource, num: number): NumPair<Resource>;\ndeclare function value(id: Frame, num: number): NumPair<Frame>;\ndeclare function value(id: Color, num: number): NumPair<Color>;\ndeclare function value(id: Extra, num: number): NumPair<Extra>;\ndeclare function label(value: Value, cb: () => void);\ndeclare function label(value: Value, continueOnReturn: boolean, cb: () => void);\n"